import os
import shutil
import logging
import stat
import time
from xml.dom.minidom import Document
import tmstaf.platformUtil
import tmstaf.util
import summaryReport

REPORT_TITLE = 'Testing Report  --Generated by TMSTAF'


class ReportGenerator:
    _strTemplatePath = os.path.join(
        os.path.dirname(__file__) or os.getcwd(), 'template')
    _strXslPath = os.path.join(_strTemplatePath, 'xsl')
    _strIconPath = os.path.join(_strTemplatePath, 'icon')
    strMainPage = 'main.html'
    strIndexPage = 'index.html'
    _lstFiles = [strMainPage, 'word.css']

    def __init__(self, strDestDir, strTestRunName, strPageTitle=REPORT_TITLE):
        self._isInit = 0
        self._strProductInfo = ''
        self._strDestDir = strDestDir
        self._strPageTitle = strPageTitle
        self._intStartTime = 0
        self._strTestRunName = strTestRunName
        self._lstAdditionalInfo = []

    def init(self):
        if not os.path.exists(self._strDestDir):
            os.makedirs(self._strDestDir)
        self._copyTemplateFiles()
        self.createIndexPage(self._strPageTitle, [
            '<meta http-equiv="refresh" content="180"/>'])
        self._isInit = 1
        self._intStartTime = int(time.time())

    def addAdditionalInfo(self, strName, strValue):
        self._lstAdditionalInfo.append((strName, strValue))

    def createIndexPage(self, strTitle, lstHead=None):
        dic = {'html_title': strTitle, 'html_head': ''}
        if lstHead:
            dic['html_head'] = '\r\n'.join(lstHead)

        s = open(os.path.join(
            self._strTemplatePath, self.strIndexPage), 'rb').read()
        f = file(os.path.join(self._strDestDir, self.strIndexPage), 'wb')
        f.write(s % dic)
        f.close()

    def _copyTemplateFiles(self):
        for strFile in self._lstFiles:
            shutil.copy2(os.path.join(
                self._strTemplatePath, strFile), self._strDestDir)
            os.chmod(os.path.join(self._strDestDir, strFile), stat.S_IWRITE |
                     stat.S_IREAD | stat.S_IRGRP | stat.S_IROTH)
        #copy other files
        for strSrcPath, strDirName, strExt in ([self._strXslPath, 'xsl', '.xsl'], [self._strIconPath, 'icon', '.jpg']):
            strDestPath = os.path.join(self._strDestDir, strDirName)
            if not os.path.exists(strDestPath):
                os.makedirs(strDestPath)
            for strFile in os.listdir(strSrcPath):
                if strFile[-4:].lower() == strExt:
                    shutil.copy2(os.path.join(
                        strSrcPath, strFile), strDestPath)

    def genTestCaseDoc(self, objTestCase):
        if not self._isInit:
            self.init()
        strDocPath = os.path.join(self._strDestDir, objTestCase.getTestsuite())
        if not os.path.exists(strDocPath):
            os.makedirs(strDocPath)
        xmlNode = self._genTestCaseDom(objTestCase)
        strXml = xmlNode.toprettyxml()
        strXml = strXml.encode('utf-8')

        strXmlFile = os.path.join(strDocPath, objTestCase.getName() + '.xml')
        f = open(strXmlFile, 'wb')
        f.write('<?xml version="1.0" encoding="UTF-8"?>\r\n')
        f.write('<?xml-stylesheet type="text/xsl" href="../xsl/testcase.xsl"?>\r\n')
        f.write(strXml)
        f.close()

    def _genTestCaseDom(self, objTestCase):
        doc = Document.implementation.createDocument(None, "docBuf", None)
        rootNode = self._createNode(
            doc, 'testcase', {'name': objTestCase.getName()})
        rootNode.appendChild(doc.createTextNode('\r\n'))
        lstData = objTestCase.getAllAttr()
        for strName, strData in lstData:
            dicAttr = {'name': strName}
            if strName in ('DataFile', 'Scenario'):
                dicAttr['link'] = '1'
            tmpNode = rootNode.appendChild(
                self._createNode(doc, 'testcaseAttr', dicAttr))
            tmpNode.appendChild(doc.createTextNode(str(strData)))
            rootNode.appendChild(doc.createTextNode('\r\n'))
        fileListNode = rootNode.appendChild(self._createNode(doc, 'fileList'))
        fileListNode.appendChild(doc.createTextNode('\r\n'))
        for strFileName in os.listdir(objTestCase.getTestResultDir()):
            tmpNode = fileListNode.appendChild(self._createNode(doc, 'file', {'url': '%s/%s' % (objTestCase.getName(), strFileName)}))
            tmpNode.appendChild(doc.createTextNode(strFileName))
            fileListNode.appendChild(doc.createTextNode('\r\n'))
        rootNode.appendChild(doc.createTextNode('\r\n'))
        lstData = [('Setup', objTestCase.getSetupSteps()), ('Test', objTestCase.getTestSteps()), ('TearDown', objTestCase.getTearDownSteps())]
        for strStepType, iterator in lstData:
            intCount = 0
            lstStepNode = []
            for objTestStep in iterator:
                intCount += 1
                dicAttr = {'id': intCount, 'result': '-'}
                if objTestStep.tested:
                    if objTestStep.isPass:
                        dicAttr['result'] = 'pass'
                    elif objTestStep.isCrash:
                        dicAttr['result'] = 'crash'
                    else:
                        dicAttr['result'] = 'fail'
                stepNode = self._createNode(doc, 'step', dicAttr)
                stepNode.appendChild(doc.createTextNode('\r\n'))
                for strName, strData in objTestStep.getAllAttr():
                    tmpNode = stepNode.appendChild(self._createNode(doc,
                                                                    'stepAttr', {'name': strName}))
                    tmpNode.appendChild(doc.createTextNode(strData))
                    stepNode.appendChild(doc.createTextNode('\r\n'))
                lstStepNode.append(stepNode)
            stepParentNode = rootNode.appendChild(self._createNode(
                doc, 'stepList', {'type': strStepType}))
            if lstStepNode:

                stepParentNode.appendChild(doc.createTextNode('\r\n'))
                for stepNode in lstStepNode:
                    stepParentNode.appendChild(stepNode)
                    stepParentNode.appendChild(doc.createTextNode('\r\n'))
                rootNode.appendChild(doc.createTextNode('\r\n'))
        return rootNode

    def _createNode(self, doc, strTagName, dicAttribute=None):
        node = doc.createElement(strTagName)
        if dicAttribute:
            for k, v in dicAttribute.items():
                if v is None:
                    continue
                attr = doc.createAttribute(k)
                attr.value = str(v)
                node.setAttributeNode(attr)
        return node

    def start(self, objTestResult):
        if not self._isInit:
            self.init()
        self.genTestSummary(objTestResult)
        lstSuite = objTestResult.getTestsuiteList()
        for strSuiteName in lstSuite:
            dicSuite = objTestResult.getSuite(strSuiteName)
            self.genSuiteSummary(dicSuite, strSuiteName)
        self._createMainPage(objTestResult)

    def update(self, strSuiteName, objTestResult):
        if not self._isInit:
            self.init()
        self.genTestSummary(objTestResult)
        dicSuite = objTestResult.getSuite(strSuiteName)
        self.genSuiteSummary(dicSuite, strSuiteName)
        self._createMainPage(objTestResult)

    def genTestSummary(self, objTestResult):
        node = self._genTestSummaryDom(objTestResult)
        strXml = node.toprettyxml()
        strXml = strXml.encode('utf-8')
        lst = ['<?xml version="1.0" encoding="UTF-8"?>', '<?xml-stylesheet type="text/xsl" href="xsl/testsuitesSummary.xsl"?>', strXml]
        self._updateFileContent(os.path.join(
            self._strDestDir, 'summary.xml'), '\r\n'.join(lst))

    def _updateFileContent(self, strFilePath, strContent):
        strTmpFile = strFilePath + '.tmp'
        try:
            f = open(strTmpFile, 'wb')
        except:
            logging.error('create temp file failed! %s',
                          strFilePath, tmstaf.util.getException())
            return
        f.write(strContent)
        f.close()
        del f
        if os.path.exists(strFilePath):
            try:
                os.remove(strFilePath)
            except:
                logging.error('update content of %s failed! %s',
                              strFilePath, tmstaf.util.getException())
                return
        try:
            os.rename(strTmpFile, strFilePath)
        except:
            logging.error('update content of %s failed! %s',
                          strFilePath, tmstaf.util.getException())
            os.remove(strTmpFile)

    def _createMainPage(self, objTestResult):
        lstBuf = ['<pre>Pass: %s    Fail: %s', '-' * 40]
        count = 0
        intPass = 0
        for strSuiteName, strCaseName, dicResult in objTestResult.getAllTestCase():
            if dicResult['starts'] == 0:
                continue
            count += 1
            if dicResult['passes'] > 0:
                strResult = 'Pass'
                intPass += 1
            else:
                strResult = 'Fail'
            lstBuf.append('%3d  %s.%s  %s  %s' % (count, strSuiteName, strCaseName, strResult, self._getStrTime(dicResult['elapsedTime'])))

        lstBuf[0] = lstBuf[0] % (intPass, (count - intPass))
        lstBuf.append('</pre>')
        strBuf = open(os.path.join(
            self._strTemplatePath, self.strMainPage), 'rb').read()

        strHeader = '<b>Product Info:</b>&nbsp;%s<br>\r\n<b>Machine Platform:</b>%s' % (self._strProductInfo, tmstaf.platformUtil.getPlatformInfo())
        strHeader += '<br><b>Machine Name:</b> %s(%s)<br>\r\n' % (
            tmstaf.util.getHostName(), tmstaf.util.getIpList()[0])

        strBuf = strBuf % {'header': strHeader, 'body': '\r\n'.join(lstBuf)}
        strMainPageFile = os.path.join(self._strDestDir, self.strMainPage)
        self._updateFileContent(strMainPageFile, strBuf)

    def finish(self, objTestResult, strTitle=REPORT_TITLE):
        if not self._isInit:
            self.init()
        self.genTestSummary(objTestResult)
        lstSuites = objTestResult.getTestsuiteList()
        for strSuiteName in lstSuites:
            dicSuite = objTestResult.getSuite(strSuiteName)
            self.genSuiteSummary(dicSuite, strSuiteName)
        self.createIndexPage(strTitle)
        lstHeaderInfo = [('Test Name', self._strTestRunName),
                         ('Product Info', self._strProductInfo),
                         ('Machine Platform', tmstaf.platformUtil.getPlatformInfo()),
                         ('Machine Name', '%s(%s)' % (tmstaf.util.getHostName(), tmstaf.util.getIpList()[0])),
                         ('Result Folder', self._strDestDir)]
        lstHeaderInfo.extend(self._lstAdditionalInfo)
        f = file(os.path.join(self._strDestDir, self.strMainPage), 'wb')
        summaryReport.genHtmlSummaryReport(f, objTestResult, lstHeaderInfo)
        f.close()

    def setProductInfo(self, s):
        if s:
            self._strProductInfo = s

    def _genTestSummaryDom(self, objTestResult):
        intElapsedTime = 0
        doc = Document.implementation.createDocument(None, "docBuf", None)
        rootNode = doc.createElement('summary')
        lstInfo = (('testRunName', self._strTestRunName), ('timeStamp', self._intStartTime), ('productInfo', self._strProductInfo),
                   ('platform', tmstaf.platformUtil.getPlatformInfo()), (
                   'hostName', tmstaf.util.getHostName()),
                   ('ip', tmstaf.util.getIpList()[0]), ('numberOfCase',
                                                        objTestResult.intNumOfCase),
                   ('started', objTestResult.intStarted), (
                   'passed', objTestResult.intPassed),
                   ('failed', objTestResult.intFailed), (
                   'crashed', objTestResult.intCrashed),
                   )
        for strTag, value in lstInfo:
            self._addTextNode(doc, rootNode, strTag, value)
        suiteListNode = rootNode.appendChild(
            self._createNode(doc, 'testsuiteList'))
        lstSuites = objTestResult.getTestsuiteList()
        lstSuites.sort()
        for strSuiteName in lstSuites:
            dicSuite = objTestResult.getSuite(strSuiteName)
            intElapsedTime += dicSuite['elapsedTime']
            suiteNode = suiteListNode.appendChild(
                self._createNode(doc, 'testsuite'))
            lstAllNode = (('name', strSuiteName), ('url', '%s/summary.xml' % strSuiteName), ('numOfCase', len(dicSuite['testcases'])),
                          ('starts', dicSuite['starts']), ('passes', dicSuite['passes']), ('fails', dicSuite['fails']),
                          ('crashes', dicSuite['crashes']), ('totalFails', dicSuite['fails'] + dicSuite['crashes']),
                          ('elapsedTime', self._getStrTime(dicSuite['elapsedTime'])))
            for strTag, value in lstAllNode:
                tmpNode = suiteNode.appendChild(self._createNode(doc, strTag))
                tmpNode.appendChild(doc.createTextNode(str(value)))
        elapsedTimeNode = rootNode.appendChild(
            self._createNode(doc, 'totalElapsedTime'))
        elapsedTimeNode.appendChild(
            doc.createTextNode(self._getStrTime(intElapsedTime)))
        failsNode = rootNode.appendChild(self._createNode(doc, 'testCasesFailed', {'count': len(objTestResult.getFailedCaseList())}))
        for strSuiteName, strTestCaseName in objTestResult.getFailedCaseList():
            tmpNode = failsNode.appendChild(self._createNode(doc, 'testcase', {'url': '%s/%s.xml' % (strSuiteName, strTestCaseName)}))
            tmpNode.appendChild(doc.createTextNode(strTestCaseName))
        return rootNode

    def _addTextNode(self, doc, rootNode, name, value):
        return rootNode.appendChild(self._createNode(doc, name)).appendChild(doc.createTextNode(str(value)))

    def genSuiteSummary(self, dicSuite, strSuiteName):
        node = self._getSuiteSummaryDom(dicSuite, strSuiteName)
        strXml = node.toprettyxml()
        strXml = strXml.encode('utf-8')
        lst = ['<?xml version="1.0" encoding="UTF-8"?>', '<?xml-stylesheet type="text/xsl" href="../xsl/testcaseSummary.xsl"?>', strXml]
        self._updateFileContent(os.path.join(self._strDestDir,
                                             strSuiteName, 'summary.xml'), '\r\n'.join(lst))

    def _getStrTime(self, intSeconds, showMsecs=0):
        i = int(intSeconds)
        s = '%.2d:%.2d:%.2d' % (i / 3600, (i % 3600) / 60, i % 60)
        if showMsecs:
            msecs = (intSeconds - long(intSeconds)) * 1000
            s += '.%03d' % msecs
        return s

    def _getSuiteSummaryDom(self, dicSuite, strSuiteName):
        doc = Document.implementation.createDocument(None, "docBuf", None)
        rootNode = doc.createElement('testsuite')

        lstAllNode = (('suiteName', strSuiteName), ('count', len(dicSuite['testcases'])), ('starts', dicSuite['starts']),
                      ('passes', dicSuite['passes']), ('fails', dicSuite['fails']), ('crashes', dicSuite['crashes']),
                      ('elapsedTime', self._getStrTime(dicSuite['elapsedTime'])))
        for strTag, value in lstAllNode:
            self._addTextNode(doc, rootNode, strTag, value)

        for strTestCaseName, dicResult in dicSuite['testcases'].items():
            resultNode = rootNode.appendChild(
                self._createNode(doc, 'testResult'))
            lstAllNode = (('name', strTestCaseName), ('url', '%s.xml' % strTestCaseName), ('starts', dicResult['starts']),
                          ('passes', dicResult['passes']), ('fails', dicResult['fails']), ('crashes', dicResult['crashes']),
                          ('elapsedTime', self._getStrTime(dicResult['elapsedTime'], 1)), ('scenario', dicResult['scenario'] or '-'),
                          ('title', dicResult['title']))
            for strTag, value in lstAllNode:
                self._addTextNode(doc, resultNode, strTag, value)
        return rootNode
